# REGLinux configuration
#!/bin/sh

# update the rescue if needed
do_update_rescue() {
    if test -e /boot_root/boot/rescue.update
    then
        mount -o remount,rw /boot_root || return 1
        mv /boot_root/boot/rescue.update /boot_root/boot/rescue || return 1
        # remove the overlay when updating
        if test -e /boot_root/boot/overlay
        then
            mv /boot_root/boot/overlay /boot_root/boot/overlay.old || return 1
        fi
        # trigger do_rescue to finish upgrade, expand SHARE partition, etc.
        touch /boot_root/REG_UPDATE
        mount -o remount,ro /boot_root || return 1
    fi
}

# update the modules if needed
do_update_modules() {
    if test -e /boot_root/boot/modules.update
    then
        mount -o remount,rw /boot_root || return 1
        mv /boot_root/boot/modules.update /boot_root/boot/modules || return 1
        # remove the overlay when updating
        if test -e /boot_root/boot/overlay
        then
            mv /boot_root/boot/overlay /boot_root/boot/overlay.old || return 1
        fi
        mount -o remount,ro /boot_root || return 1
    fi
}

# update the firmware if needed
do_update_firmware() {
    if test -e /boot_root/boot/firmware.update
    then
        mount -o remount,rw /boot_root || return 1
        mv /boot_root/boot/firmware.update /boot_root/boot/firmware || return 1
        # remove the overlay when updating
        if test -e /boot_root/boot/overlay
        then
            mv /boot_root/boot/overlay /boot_root/boot/overlay.old || return 1
        fi
        mount -o remount,ro /boot_root || return 1
    fi
}

# update the rootfs if needed
do_update_rootfs() {
    if test -e /boot_root/boot/reglinux.update
    then
        mount -o remount,rw /boot_root || return 1
        mv /boot_root/boot/reglinux.update /boot_root/boot/reglinux || return 1
        # remove the overlay when updating
        if test -e /boot_root/boot/overlay
        then
            mv /boot_root/boot/overlay /boot_root/boot/overlay.old || return 1
        fi
        mount -o remount,ro /boot_root || return 1
    fi
}

# mount the modules
do_mount_modules() {
    mkdir -p /new_root/lib/modules
    mount /boot_root/boot/modules /new_root/lib/modules || return 1
}

# mount the firmware
do_mount_firmware() {
    mkdir -p /new_root/lib/firmware
    mount /boot_root/boot/firmware /new_root/lib/firmware || return 1
}

do_mount() {
    if mount -o ro "${1}" /boot_root; then return 0; fi
    return 1
}

do_rescue() {
    # mount the future root
    mount /boot_root/boot/rescue /new_root || return 1

    do_mount_firmware
    do_mount_modules

    # moving current mounts
    mkdir -p /new_root/boot /new_root/sys /new_root/proc /new_root/dev
    mount --move /boot_root    /new_root/boot    || return 1
    mount --move /sys  	       /new_root/sys     || return 1
    mount --move /proc 	       /new_root/proc    || return 1
    mount --move /dev  	       /new_root/dev     || return 1

    # Switch to rescue filesystem
    exec switch_root /new_root /sbin/init || return 1
    # If no error, it won't return to this script, so rescue needs to reboot the system
}

do_root() {
    mkdir -p /boot_root /new_root /overlay_root /sys /proc || return 1
    mount -t proc  -o nodev,noexec,nosuid proc  /proc      || return 1
    mount -t sysfs -o nodev,noexec,nosuid sysfs /sys       || return 1

    # Mount by default this partition
    MOUNTARG="LABEL=REGLINUX"
    # read the parameters
    read -r cmdline < /proc/cmdline
    for param in ${cmdline} ; do
        case ${param} in
            dev=*)
              dev=${param#dev=}
              test -n "${dev}" && MOUNTARG=${dev}
            ;;
            label=*)
              label=${param#label=}
              test -n "${label}" && MOUNTARG=LABEL=${label}
            ;;
            uuid=*)
              uuid=${param#uuid=}
              test -n "${uuid}" && MOUNTARG=UUID=${uuid}
           ;;
        esac
    done

    # look for devices
    mount -t devtmpfs devtmpfs /dev

    while ! do_mount "${MOUNTARG}"
    do
        echo "Waiting for the root device"
        sleep 1
    done

    # Process updates if any, do_update_rescue must be the last
    do_update_modules
    do_update_firmware
    do_update_rootfs
    do_update_rescue

    # Test for RESCUE mode trigger
    if test -f /boot_root/REG_UPDATE || test -f /boot_root/REG_RESCUE
    then
        do_rescue || return 1
        # this script won't go past here
        # do_rescue must reboot the system
    fi

    # create an overlay on memory
    mount -t tmpfs -o size=32M tmpfs /overlay_root || return 1
    mkdir /overlay_root/base /overlay_root/overlay /overlay_root/work /overlay_root/saved || return 1

    # fill the overlay with the stored one
    if test -f /boot_root/boot/overlay
    then
        # the mount can fail if the fs was open in write and not correctly closed
        if mount -o ro /boot_root/boot/overlay /overlay_root/saved
        then
            cp -pr /overlay_root/saved/* /overlay_root/overlay || return 1
            umount /overlay_root/saved                         || return 1
        fi
    fi

    # mount the rootfs
    mount /boot_root/boot/reglinux /overlay_root/base || return 1

    # mount the future root in read write
    if ! mount -t overlay overlay -o rw,lowerdir=/overlay_root/base,upperdir=/overlay_root/overlay,workdir=/overlay_root/work /new_root
    then
        # mount only as squashfs, no overlay (xu4 doesn't support overlayfs)
        mount /boot_root/boot/reglinux /new_root || return 1
    fi

    do_mount_firmware
    do_mount_modules

    # moving current mounts
    mkdir -p /new_root/boot /new_root/overlay /new_root/sys /new_root/proc /new_root/dev
    mount --move /boot_root    /new_root/boot    || return 1
    mount --move /overlay_root /new_root/overlay || return 1
    mount --move /sys  	       /new_root/sys  	 || return 1
    mount --move /proc 	       /new_root/proc 	 || return 1
    mount --move /dev  	       /new_root/dev  	 || return 1

    # switch to the new root
    exec switch_root /new_root /sbin/init || return 1
}

if ! do_root
then
    echo "Cannot boot to mounted filesystem !"
    /bin/sh
fi
